/**
 * Ukraine Alert API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * Contact: support@stfalcon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.AlertModification
import io.swagger.client.models.AlertRegionModel
import io.swagger.client.models.RegionAlarmsHistory

import UkraineAlarm.infrastructure.*

class AlertsApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * Області, регіони та громади з тривогами
     * 
     * @return kotlin.Array<AlertRegionModel>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV3AlertsGet(): kotlin.Array<AlertRegionModel> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v3/alerts"
        )
        val response = request<kotlin.Array<AlertRegionModel>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<AlertRegionModel>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Отримати останніх 25 тривог регіону
     * 
     * @param regionId  (optional)
     * @return kotlin.Array<RegionAlarmsHistory>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV3AlertsRegionHistoryGet(regionId: kotlin.String? = null): kotlin.Array<RegionAlarmsHistory> {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (regionId != null) {
                put("regionId", listOf(regionId.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v3/alerts/regionHistory", query = localVariableQuery
        )
        val response = request<kotlin.Array<RegionAlarmsHistory>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<RegionAlarmsHistory>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Статус області/регіону/громади
     * 
     * @param regionId ID області/регіону/громади 
     * @return kotlin.Array<AlertRegionModel>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV3AlertsRegionIdGet(regionId: kotlin.String): kotlin.Array<AlertRegionModel> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v3/alerts/{regionId}".replace("{" + "regionId" + "}", "$regionId")
        )
        val response = request<kotlin.Array<AlertRegionModel>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<AlertRegionModel>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Перевірка номеру останньої дії. Використовувати для перевірки необхідності оновлювати дані
     * 
     * @return AlertModification
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV3AlertsStatusGet(): AlertModification {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v3/alerts/status"
        )
        val response = request<AlertModification>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AlertModification
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
